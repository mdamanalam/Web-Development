mcartlogin

LoginComponent of mCart application

Validations in LoginComponent of mCart application

Demosteps:

Explore the code inside login.component.html present under the login folder. Observe the creation of LoginComponent as a model-driven form and addition of validations to it.


 

The code inside login.component.html is present under the login folder. Observe the creation of LoginComponent as a reactive form and addition of validations to it.

<!-- Login form-->
<div class="container container-styles">
	<div class="col-xs-7 col-xs-offset-3">
		<div class="panel panel-primary">
			<div class="panel-heading">Login</div>
			<div class="panel-body padding">
				<form class="form-horizontal" [formGroup]="loginForm">
					<div class="form-group" >
						<label for="name" class="col-xs-4 control-label" style="text-align:left">User Name</label>
						<div class="col-xs-8">
							<input type="text" class="form-control" [ngClass]="{'valid':loginForm.controls['userName'].valid, 'invalid':loginForm.controls['userName'].invalid && !loginForm.controls['userName'].pristine}" formControlName="userName">
							<div *ngIf="loginForm.controls['password'].errors && loginForm.controls['userName'].dirty">
							<div *ngIf="loginForm.controls['userName'].errors?.['required']" style="color:red">UserName is required
							</div>
						</div>
						</div>
					</div>
					<div class="form-group">
						<label for="password" class="col-xs-4 control-label" style="text-align:left">Password</label>
						<div class="col-xs-8">
							<input type="password" class="form-control" [ngClass]="{'valid':loginForm.controls['password'].valid, 'invalid':loginForm.controls['password'].invalid && !loginForm.controls['password'].pristine}" formControlName="password">
							<div *ngIf="loginForm.controls['password'].errors && loginForm.controls['password'].dirty">
							<div *ngIf="loginForm.controls['password'].errors?.['required']" style="color:red">Password is required
							</div>
						</div>
						</div>
					</div>
					<div *ngIf="!valid" class="error">Invalid Credentials...Please try again...</div>
					<br />
					<div class="form-group">
						<span class="col-xs-4"></span>
						<div class="col-xs-3">
							<button (click)="onSubmit()" class="btn btn-primary" [disabled]="!loginForm.valid">Login</button>
						</div>
						<span class="col-xs-5" style="top:8px">
							<a [routerLink]="['/welcome']" style="color:#337ab7;text-decoration: underline;">Cancel</a>
						</span>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

Line 11: The username textbox is bound to the formControlName userName

Line 21: The password textbox is bound to the formControlName password

Line 12-16: Renders the given error message if required validation fails

Line 22-26: Similarly required validation is added to the password field and the corresponding error message will be displayed if the validation fails
 

Observe the creation of model-driven form within the LoginComponent. Open login.component.ts.

import { Component, ElementRef, OnInit, Renderer2, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { Login } from './Login';
import { LoginService } from './login.service';
@Component({
    templateUrl: './login.component.html',
    styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
    login = new Login();
    users: Login[] = [];
    valid = true;    
    @ViewChild('uname') usernameElement!: ElementRef; 
    loginForm!: FormGroup;
    constructor(private router: Router, private formBuilder: FormBuilder,
        private loginService: LoginService, private renderer: Renderer2) {
    }
    ngOnInit() {
        // Makes a service call to fetch users data from the backend
        this.loginService.getUsers().subscribe({next:users => this.users = users});
        this.loginForm = this.formBuilder.group({
            userName: [this.login.userName, Validators.required],
            password: [this.login.password, Validators.required]
        })
    }
    // Invoked when user clicks submit in login form
    // Validates the credentials with the data fetched from the backend
    onSubmit() {
        
         //fetches the form object containing the values of all the form controls
        this.login = this.loginForm.getRawValue();      
        const user = this.users.filter(currUser => currUser.userName === this.login.userName && currUser.password === this.login.password)[0];
        if (user) {
             this.loginService.username = this.login.userName;      
            this.router.navigate(['/products']);
        } else {
            this.valid = false;
        }
    }
}


Line 26-29: Builds the form with two form input controls: use